import { io } from "https://cdn.socket.io/4.8.1/socket.io.esm.min.js";

document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const waitingScreen = document.getElementById('waitingScreen');
    const joinCallBtn = document.getElementById('joinCallBtn');
    const videoCallContainer = document.getElementById('videoCallContainer');
    const localVideo = document.getElementById('localVideo');
    const remoteVideo = document.getElementById('remoteVideo');
    const toggleMicBtn = document.getElementById('toggleMic');
    const toggleVideoBtn = document.getElementById('toggleVideo');
    const shareScreenBtn = document.getElementById('shareScreen');
    const endCallBtn = document.getElementById('endCall');
    const connectionStatus = document.getElementById('connectionStatus');
    const statusText = document.getElementById('statusText');
    const callEndedModal = document.getElementById('callEndedModal');
    const callAgainBtn = document.getElementById('callAgain');
    const sidePanel = document.getElementById('sidePanel');
    const callTimer = document.querySelector('.call-timer');
    const callQuality = document.getElementById('callQuality');

    // WebRTC variables
    let localStream = null;
    let remoteStream = null;
    let peerConnection = null;
    let roomId = null;
    let callStartTimestamp = null;
    let timerInterval = null;
    let isAudioMuted = false;
    let isVideoMuted = false;
    let isScreenSharing = false;
    let originalLocalStream = null;
    let socket = null;
    let userId = null;
    let userType = 'customer';

    // L·∫•y th√¥ng tin t·ª´ URL v√† session
    const urlParams = new URLSearchParams(window.location.search);
    roomId = urlParams.get('room');
    userId = document.getElementById('userid')?.value;
    
    // L·∫•y userType t·ª´ hidden input (auto-detect t·ª´ PHP session)
    const userTypeInput = document.getElementById('usertype')?.value;
    userType = userTypeInput || 'customer'; // Default to customer n·∫øu kh√¥ng c√≥
    
    console.log('üîç User info:', { userId, userType, roomId });
    
    if (!roomId) {
        alert('Thi·∫øu th√¥ng tin ph√≤ng g·ªçi video');
        window.location.href = '/';
        return;
    }
    
    if (!userId) {
        alert('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ tham gia cu·ªôc g·ªçi');
        window.location.href = '/';
        return;
    }

    // T·ª± ƒë·ªông tham gia cu·ªôc g·ªçi khi load trang (KH√îNG y√™u c·∫ßu camera/mic)
    window.addEventListener('load', async function() {
        try {
            await initVideoCall();
        } catch (error) {
            console.error('L·ªói tham gia cu·ªôc g·ªçi:', error);
            alert('Kh√¥ng th·ªÉ tham gia cu·ªôc g·ªçi. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    });

    // H√†m kh·ªüi t·∫°o video call (KH√îNG y√™u c·∫ßu camera/mic)
    async function initVideoCall() {
        try {
            // Hi·ªÉn th·ªã video call container ngay l·∫≠p t·ª©c
            videoCallContainer.classList.remove('hidden');
            
            // Thi·∫øt l·∫≠p k·∫øt n·ªëi Socket.IO
            updateStatus('ƒêang k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß...');
            await setupSocketConnection();
            
            // B·∫Øt ƒë·∫ßu timer
            startCallTimer();
            updateCallStartTime();
            
            console.log('‚úÖ ƒê√£ tham gia cu·ªôc g·ªçi (ch∆∞a b·∫≠t camera/mic)');
            
        } catch (error) {
            throw error;
        }
    }


    // Thi·∫øt l·∫≠p lu·ªìng video local (CH·ªà G·ªåI KHI NG∆Ø·ªúI D√ôNG B·∫¨T CAMERA/MIC)
    async function setupLocalStream() {
        try {
            // N·∫øu ƒë√£ c√≥ stream r·ªìi th√¨ return
            if (localStream) {
                return localStream;
            }
            
            localStream = await navigator.mediaDevices.getUserMedia({
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    autoGainControl: true
                },
                video: {
                    width: { ideal: 1280 },
                    height: { ideal: 720 },
                    facingMode: 'user'
                }
            });
            
            originalLocalStream = localStream;
            localVideo.srcObject = localStream;
            
            // Th√™m tracks v√†o peer connection n·∫øu ƒë√£ c√≥
            if (peerConnection) {
                localStream.getTracks().forEach(track => {
                    peerConnection.addTrack(track, localStream);
                    console.log('‚ûï Added track:', track.kind);
                });
            }
            
            console.log('‚úÖ Local stream setup successfully');
            return localStream;
        } catch (error) {
            console.error('L·ªói truy c·∫≠p media:', error);
            throw error;
        }
    }

    // X·ª≠ l√Ω l·ªói kh·ªüi t·∫°o
    function handleInitError(error) {
        let errorMessage = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi cu·ªôc g·ªçi';
        
        if (error.name === 'NotAllowedError') {
            errorMessage = 'B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn truy c·∫≠p camera/microphone.\n\nVui l√≤ng:\n1. Nh·∫•n v√†o bi·ªÉu t∆∞·ª£ng kh√≥a/camera tr√™n thanh ƒë·ªãa ch·ªâ\n2. Cho ph√©p truy c·∫≠p Camera v√† Microphone\n3. T·∫£i l·∫°i trang v√† th·ª≠ l·∫°i';
        } else if (error.name === 'NotFoundError') {
            errorMessage = 'Kh√¥ng t√¨m th·∫•y camera ho·∫∑c microphone.\n\nVui l√≤ng ki·ªÉm tra:\n‚Ä¢ Camera/microphone ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi\n‚Ä¢ Thi·∫øt b·ªã ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng\n‚Ä¢ Kh√¥ng c√≥ ·ª©ng d·ª•ng n√†o kh√°c ƒëang s·ª≠ d·ª•ng';
        } else if (error.name === 'NotReadableError') {
            errorMessage = 'Kh√¥ng th·ªÉ truy c·∫≠p camera/microphone.\n\nC√≥ th·ªÉ m·ªôt ·ª©ng d·ª•ng kh√°c ƒëang s·ª≠ d·ª•ng thi·∫øt b·ªã.';
        }
        
        alert(errorMessage);
        
        // Reset n√∫t v√† cho ph√©p th·ª≠ l·∫°i
        joinCallBtn.disabled = false;
        joinCallBtn.innerHTML = '<i class="fas fa-phone-alt mr-2"></i>Th·ª≠ l·∫°i';
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i hi·ªÉn th·ªã
    function updateStatus(message) {
        if (statusText) {
            statusText.textContent = message;
        }
    }

    // Thi·∫øt l·∫≠p k·∫øt n·ªëi Socket.IO
    function setupSocketConnection() {
        // K·∫øt n·ªëi Socket.IO
        socket = io('http://localhost:3000/video', {
            transports: ['websocket', 'polling'],
            reconnection: true,
            reconnectionDelay: 1000,
            reconnectionAttempts: 5
        });
        
        // K·∫øt n·ªëi th√†nh c√¥ng
        socket.on('connect', () => {
            console.log('‚úÖ Socket connected:', socket.id);
            updateStatus('ƒêang tham gia ph√≤ng...');
            
            // Join room v·ªõi th√¥ng tin x√°c th·ª±c
            socket.emit('join-room', {
                roomId: roomId,
                userId: userId,
                userType: userType
            });
        });

        // Join room th√†nh c√¥ng
        socket.on('room-joined', async (data) => {
            console.log('‚úÖ ƒê√£ tham gia room:', data);
            
            // ƒê·∫øm s·ªë ng∆∞·ªùi trong room
            const participantCount = data.participants ? Object.keys(data.participants).length : 1;
            console.log('üë• S·ªë ng∆∞·ªùi trong room:', participantCount);
            
            // N·∫øu ƒë√£ c√≥ 2 ng∆∞·ªùi ‚Üí T·ª± ƒë·ªông b·∫≠t camera/mic v√† t·∫°o k·∫øt n·ªëi
            if (participantCount >= 2) {
                console.log('üé• C√≥ 2 ng∆∞·ªùi, t·ª± ƒë·ªông b·∫≠t camera/mic v√† thi·∫øt l·∫≠p k·∫øt n·ªëi...');
                updateStatus('ƒêang k·∫øt n·ªëi camera/microphone...');
                
                try {
                    // B·∫≠t camera/mic
                    await setupLocalStream();
                    
                    // Ch·ªù 500ms ƒë·ªÉ stream ·ªïn ƒë·ªãnh
                    setTimeout(async () => {
                        // T·∫°o peer connection v·ªõi local stream
                        createPeerConnection();
                        
                        // Ng∆∞·ªùi v√†o TR∆Ø·ªöC (customer) t·∫°o offer
                        if (userType === 'customer') {
                            updateStatus('ƒêang thi·∫øt l·∫≠p k·∫øt n·ªëi v·ªõi nh√¢n vi√™n...');
                            await createOffer();
                        } else {
                            updateStatus('ƒêang thi·∫øt l·∫≠p k·∫øt n·ªëi v·ªõi kh√°ch h√†ng...');
                        }
                    }, 500);
                    
                } catch (error) {
                    console.error('‚ùå L·ªói b·∫≠t camera/mic:', error);
                    updateStatus('Kh√¥ng th·ªÉ truy c·∫≠p camera/microphone');
                }
            } else {
                // Ch·ªâ c√≥ 1 ng∆∞·ªùi ‚Üí Hi·ªÉn th·ªã tr·∫°ng th√°i ch·ªù
                if (userType === 'customer') {
                    updateStatus('ƒêang ch·ªù nh√¢n vi√™n t∆∞ v·∫•n...');
                } else if (userType === 'staff') {
                    updateStatus('ƒêang ch·ªù kh√°ch h√†ng...');
                } else {
                    updateStatus('ƒê√£ tham gia ph√≤ng');
                }
            }
        });

        // Join room th·∫•t b·∫°i
        socket.on('join-error', (data) => {
            console.error('‚ùå L·ªói join room:', data.message);
            alert(data.message);
            window.location.href = '/';
        });

        // C√≥ ng∆∞·ªùi tham gia
        socket.on('user-joined', async (data) => {
            console.log('üë§ User joined:', data);
            
            // Reset peer connection c≈© n·∫øu c√≥
            if (peerConnection) {
                console.log('üîÑ Reset peer connection c≈© ƒë·ªÉ t·∫°o k·∫øt n·ªëi m·ªõi');
                peerConnection.close();
                peerConnection = null;
            }
            
            // D·ª´ng remote stream c≈©
            if (remoteStream) {
                remoteStream.getTracks().forEach(track => track.stop());
                remoteVideo.srcObject = null;
                remoteStream = null;
            }
            
            // CH·ªà b·∫≠t camera/mic n·∫øu l√† ng∆∞·ªùi v√†o SAU v√† ch∆∞a c√≥ local stream
            // Khi test tr√™n c√πng 1 m√°y, ch·ªâ browser ƒë·∫ßu ti√™n c√≥ th·ªÉ b·∫≠t camera/mic
            if (!localStream) {
                console.log('‚ö†Ô∏è Ch∆∞a c√≥ local stream, nh∆∞ng s·∫Ω kh√¥ng t·ª± ƒë·ªông b·∫≠t ƒë·ªÉ tr√°nh conflict camera/mic');
                console.log('üí° Ng∆∞·ªùi d√πng c√≥ th·ªÉ b·∫≠t camera/mic th·ªß c√¥ng b·∫±ng n√∫t ƒëi·ªÅu khi·ªÉn');
                updateStatus('ƒêang ch·ªù k·∫øt n·ªëi...');
            }
            
            // T·∫°o peer connection m·ªõi
            createPeerConnection();
            
            // Hi·ªÉn th·ªã th√¥ng b√°o ph√π h·ª£p v√† t·∫°o offer
            if (userType === 'customer' && data.userType === 'staff') {
                updateStatus('Nh√¢n vi√™n t∆∞ v·∫•n ƒë√£ v√†o ph√≤ng. ƒêang thi·∫øt l·∫≠p k·∫øt n·ªëi...');
                
                // Customer t·∫°o offer cho staff
                setTimeout(async () => {
                    console.log('üì§ Customer t·∫°o offer cho staff...');
                    await createOffer();
                }, 1000);
                
            } else if (userType === 'staff' && data.userType === 'customer') {
                updateStatus('Kh√°ch h√†ng ƒë√£ v√†o ph√≤ng. ƒêang thi·∫øt l·∫≠p k·∫øt n·ªëi...');
                
                // Staff t·∫°o offer cho customer
                setTimeout(async () => {
                    console.log('üì§ Staff t·∫°o offer cho customer...');
                    await createOffer();
                }, 1000);
                
            } else {
                updateStatus('ƒêang thi·∫øt l·∫≠p k·∫øt n·ªëi...');
                
                // Tr∆∞·ªùng h·ª£p kh√°c c≈©ng t·∫°o offer
                setTimeout(async () => {
                    await createOffer();
                }, 1000);
            }
        });

        // Nh·∫≠n offer
        socket.on('offer', async (data) => {
            console.log('üì• Nh·∫≠n offer t·ª´:', data.from);
            await handleOffer(data.offer);
        });

        // Nh·∫≠n answer
        socket.on('answer', async (data) => {
            console.log('üì• Nh·∫≠n answer t·ª´:', data.from);
            await handleAnswer(data.answer);
        });

        // Nh·∫≠n ICE candidate
        socket.on('ice-candidate', async (data) => {
            console.log('üßä Nh·∫≠n ICE candidate t·ª´:', data.from);
            await handleIceCandidate(data.candidate);
        });

        // Ng∆∞·ªùi kh√°c r·ªùi ph√≤ng
        socket.on('user-left', (data) => {
            console.log('üëã User left:', data);
            
            // Reset peer connection ƒë·ªÉ s·∫µn s√†ng k·∫øt n·ªëi l·∫°i
            if (peerConnection) {
                peerConnection.close();
                peerConnection = null;
            }
            
            // D·ª´ng remote stream
            if (remoteStream) {
                remoteStream.getTracks().forEach(track => track.stop());
                remoteVideo.srcObject = null;
                remoteStream = null;
            }
            
            // Hi·ªÉn th·ªã th√¥ng b√°o ch·ªù ng∆∞·ªùi kia quay l·∫°i
            if (userType === 'customer') {
                updateStatus('Nh√¢n vi√™n t∆∞ v·∫•n ƒë√£ ng·∫Øt k·∫øt n·ªëi. ƒêang ch·ªù k·∫øt n·ªëi l·∫°i...');
            } else if (userType === 'staff') {
                updateStatus('Kh√°ch h√†ng ƒë√£ ng·∫Øt k·∫øt n·ªëi. ƒêang ch·ªù k·∫øt n·ªëi l·∫°i...');
            } else {
                updateStatus('Ng∆∞·ªùi d√πng kh√°c ƒë√£ ng·∫Øt k·∫øt n·ªëi. ƒêang ch·ªù k·∫øt n·ªëi l·∫°i...');
            }
            
            showConnectionStatus();
            
            console.log('‚è≥ ƒê√£ reset peer connection, s·∫µn s√†ng k·∫øt n·ªëi l·∫°i khi ng∆∞·ªùi kia quay l·∫°i');
        });
        
        // B·ªã force disconnect (ƒëƒÉng nh·∫≠p t·ª´ thi·∫øt b·ªã kh√°c)
        socket.on('force-disconnect', (data) => {
            console.log('‚ö†Ô∏è Force disconnect:', data);
            alert(data.message || 'B·∫°n ƒë√£ ƒëƒÉng nh·∫≠p t·ª´ thi·∫øt b·ªã kh√°c');
            endCall();
        });
        
        // L·ªói k·∫øt n·ªëi
        socket.on('connect_error', (error) => {
            console.error('‚ùå Socket connection error:', error);
            updateStatus('L·ªói k·∫øt n·ªëi m√°y ch·ªß. ƒêang th·ª≠ l·∫°i...');
        });
    }

    // T·∫°o Peer Connection
    function createPeerConnection() {
        if (peerConnection) return peerConnection;

        const configuration = {
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun1.l.google.com:19302' },
                { urls: 'stun:stun2.l.google.com:19302' }
            ]
        };

        peerConnection = new RTCPeerConnection(configuration);

        // CH·ªà th√™m local tracks N·∫æU ƒê√É C√ì localStream
        if (localStream) {
            localStream.getTracks().forEach(track => {
                peerConnection.addTrack(track, localStream);
                console.log('‚ûï Added track:', track.kind);
            });
        }

        // Nh·∫≠n remote stream
        peerConnection.ontrack = (event) => {
            console.log('üì∫ Nh·∫≠n remote stream:', event.streams[0].id);
            if (remoteVideo.srcObject !== event.streams[0]) {
                remoteVideo.srcObject = event.streams[0];
                remoteStream = event.streams[0];
                updateStatus('ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng!');
                
                // C·∫≠p nh·∫≠t label remote user d·ª±a tr√™n userType
                const remoteUserLabel = document.getElementById('remoteUserLabel');
                if (remoteUserLabel) {
                    if (userType === 'customer') {
                        remoteUserLabel.textContent = 'Nh√¢n vi√™n t∆∞ v·∫•n';
                    } else if (userType === 'staff') {
                        remoteUserLabel.textContent = 'Kh√°ch h√†ng';
                    } else {
                        remoteUserLabel.textContent = 'Ng∆∞·ªùi d√πng kh√°c';
                    }
                }
                
                setTimeout(() => hideConnectionStatus(), 2000);
            }
        };

        // ICE candidate
        peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                console.log('üßä G·ª≠i ICE candidate:', event.candidate.type, event.candidate.candidate);
                socket.emit('ice-candidate', {
                    roomId: roomId,
                    candidate: event.candidate
                });
            } else {
                console.log('‚úÖ ICE gathering complete');
            }
        };

        // Connection state changes
        peerConnection.onconnectionstatechange = () => {
            console.log('üîó Connection state:', peerConnection.connectionState);
            
            switch (peerConnection.connectionState) {
                case 'connected':
                    console.log('‚úÖ Peer connection established');
                    hideConnectionStatus();
                    setCallQuality('T·ªët');
                    break;
                case 'connecting':
                    updateStatus('ƒêang k·∫øt n·ªëi...');
                    break;
                case 'disconnected':
                    updateStatus('M·∫•t k·∫øt n·ªëi. ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...');
                    setCallQuality('K√©m');
                    break;
                case 'failed':
                    alert('K·∫øt n·ªëi th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
                    endCall();
                    break;
                case 'closed':
                    console.log('Connection closed');
                    break;
            }
        };

        // ICE connection state
        peerConnection.oniceconnectionstatechange = () => {
            console.log('üßä ICE connection state:', peerConnection.iceConnectionState);
        };
        
        // ICE gathering state
        peerConnection.onicegatheringstatechange = () => {
            console.log('üì° ICE gathering state:', peerConnection.iceGatheringState);
        };

        console.log('‚úÖ Peer connection created');
        return peerConnection;
    }

    // T·∫°o offer
    async function createOffer() {
        try {
            createPeerConnection();
            
            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);
            
            console.log('üì§ G·ª≠i offer');
            socket.emit('offer', {
                roomId: roomId,
                offer: offer
            });
        } catch (error) {
            console.error('L·ªói t·∫°o offer:', error);
        }
    }

    // X·ª≠ l√Ω offer
    async function handleOffer(offer) {
        try {
            // KH√îNG t·ª± ƒë·ªông b·∫≠t camera/mic khi nh·∫≠n offer
            // V√¨ khi test tr√™n c√πng 1 m√°y, camera/mic ƒë√£ b·ªã browser kia chi·∫øm d·ª•ng
            if (!localStream) {
                console.log('‚ö†Ô∏è Nh·∫≠n offer nh∆∞ng ch∆∞a c√≥ local stream');
                console.log('üí° T·∫°o peer connection m√† kh√¥ng c√≥ local tracks (ch·ªâ nh·∫≠n video)');
            }
            
            createPeerConnection();
            
            await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
            const answer = await peerConnection.createAnswer();
            await peerConnection.setLocalDescription(answer);
            
            console.log('üì§ G·ª≠i answer');
            socket.emit('answer', {
                roomId: roomId,
                answer: answer
            });
        } catch (error) {
            console.error('L·ªói x·ª≠ l√Ω offer:', error);
        }
    }

    // X·ª≠ l√Ω answer
    async function handleAnswer(answer) {
        try {
            await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
            console.log('‚úÖ ƒê√£ set remote description');
        } catch (error) {
            console.error('L·ªói x·ª≠ l√Ω answer:', error);
        }
    }

    // X·ª≠ l√Ω ICE candidate
    async function handleIceCandidate(candidate) {
        try {
            if (peerConnection) {
                await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
                console.log('‚úÖ ƒê√£ th√™m ICE candidate');
            }
        } catch (error) {
            console.error('L·ªói x·ª≠ l√Ω ICE candidate:', error);
        }
    }

    // Hi·ªÉn th·ªã tr·∫°ng th√°i k·∫øt n·ªëi
    function showConnectionStatus() {
        if (connectionStatus) {
            connectionStatus.classList.remove('hidden');
        }
    }

    // ·∫®n tr·∫°ng th√°i k·∫øt n·ªëi
    function hideConnectionStatus() {
        if (connectionStatus) {
            connectionStatus.classList.add('hidden');
        }
    }

    // H√†m k·∫øt th√∫c cu·ªôc g·ªçi
    function endCall() {
        console.log('üî¥ K·∫øt th√∫c cu·ªôc g·ªçi');
        
        // D·ª´ng t·∫•t c·∫£ local tracks
        if (localStream) {
            localStream.getTracks().forEach(track => {
                track.stop();
                console.log('‚èπÔ∏è Stopped track:', track.kind);
            });
            localStream = null;
        }
        
        // D·ª´ng t·∫•t c·∫£ remote tracks
        if (remoteStream) {
            remoteStream.getTracks().forEach(track => track.stop());
            remoteStream = null;
        }
        
        // ƒê√≥ng peer connection
        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }
        
        // Ng·∫Øt k·∫øt n·ªëi Socket.IO
        if (socket) {
            socket.emit('leave-room');
            socket.disconnect();
        }
        
        // D·ª´ng timer
        stopCallTimer();
        
        // Hi·ªÉn th·ªã modal k·∫øt th√∫c
        showCallEndedModal();
    }

    // Hi·ªÉn th·ªã modal k·∫øt th√∫c cu·ªôc g·ªçi
    function showCallEndedModal() {
        if (callEndedModal) {
            callEndedModal.classList.remove('hidden');
            callEndedModal.classList.add('flex');
        }
    }
    async function toggleMicrophone() {
        // N·∫øu ch∆∞a c√≥ localStream, y√™u c·∫ßu quy·ªÅn truy c·∫≠p
        if (!localStream) {
            try {
                toggleMicBtn.disabled = true;
                toggleMicBtn.innerHTML = '<i class="fas fa-spinner fa-spin text-xl"></i>';
                await setupLocalStream();
                toggleMicBtn.disabled = false;
                // Sau khi c√≥ stream, mic ƒë√£ B·∫¨T s·∫µn
                isAudioMuted = false;
                toggleMicBtn.innerHTML = '<i class="fas fa-microphone text-xl"></i>';
                toggleMicBtn.classList.add('bg-gray-700');
                toggleMicBtn.classList.remove('bg-red-600');
                return;
            } catch (error) {
                toggleMicBtn.disabled = false;
                toggleMicBtn.innerHTML = '<i class="fas fa-microphone-slash text-xl"></i>';
                alert('Kh√¥ng th·ªÉ truy c·∫≠p microphone. Vui l√≤ng ki·ªÉm tra quy·ªÅn tr√¨nh duy·ªát.');
                return;
            }
        }
        
        // N·∫øu ƒë√£ c√≥ localStream, toggle mute
        const audioTracks = localStream.getAudioTracks();
        if (audioTracks.length > 0) {
            isAudioMuted = !isAudioMuted;
            audioTracks[0].enabled = !isAudioMuted;
            
            // C·∫≠p nh·∫≠t UI
            if (isAudioMuted) {
                toggleMicBtn.innerHTML = '<i class="fas fa-microphone-slash text-xl"></i>';
                toggleMicBtn.classList.add('bg-red-600');
                toggleMicBtn.classList.remove('bg-gray-700');
            } else {
                toggleMicBtn.innerHTML = '<i class="fas fa-microphone text-xl"></i>';
                toggleMicBtn.classList.add('bg-gray-700');
                toggleMicBtn.classList.remove('bg-red-600');
            }
        }
    }

    // B·∫≠t/t·∫Øt camera
    async function toggleCamera() {
        // N·∫øu ch∆∞a c√≥ localStream, y√™u c·∫ßu quy·ªÅn truy c·∫≠p
        if (!localStream) {
            try {
                toggleVideoBtn.disabled = true;
                toggleVideoBtn.innerHTML = '<i class="fas fa-spinner fa-spin text-xl"></i>';
                await setupLocalStream();
                toggleVideoBtn.disabled = false;
                // Sau khi c√≥ stream, camera ƒë√£ B·∫¨T s·∫µn
                isVideoMuted = false;
                toggleVideoBtn.innerHTML = '<i class="fas fa-video text-xl"></i>';
                toggleVideoBtn.classList.add('bg-gray-700');
                toggleVideoBtn.classList.remove('bg-red-600');
                return;
            } catch (error) {
                toggleVideoBtn.disabled = false;
                toggleVideoBtn.innerHTML = '<i class="fas fa-video-slash text-xl"></i>';
                alert('Kh√¥ng th·ªÉ truy c·∫≠p camera. Vui l√≤ng ki·ªÉm tra quy·ªÅn tr√¨nh duy·ªát.');
                return;
            }
        }
        
        // N·∫øu ƒë√£ c√≥ localStream, toggle mute
        const videoTracks = localStream.getVideoTracks();
        if (videoTracks.length > 0) {
            isVideoMuted = !isVideoMuted;
            videoTracks[0].enabled = !isVideoMuted;
            
            // C·∫≠p nh·∫≠t UI
            if (isVideoMuted) {
                toggleVideoBtn.innerHTML = '<i class="fas fa-video-slash text-xl"></i>';
                toggleVideoBtn.classList.add('bg-red-600');
                toggleVideoBtn.classList.remove('bg-gray-700');
            } else {
                toggleVideoBtn.innerHTML = '<i class="fas fa-video text-xl"></i>';
                toggleVideoBtn.classList.add('bg-gray-700');
                toggleVideoBtn.classList.remove('bg-red-600');
            }
        }
    }

    // Chia s·∫ª m√†n h√¨nh
    async function toggleScreenSharing() {
        if (!isScreenSharing) {
            try {
                const screenStream = await navigator.mediaDevices.getDisplayMedia({ 
                    video: true,
                    audio: true
                });
                
                // L∆∞u tr·ªØ localStream g·ªëc
                if (!originalLocalStream) {
                    originalLocalStream = localStream;
                }
                
                // Thay th·∫ø video track trong peer connection
                const videoTrack = screenStream.getVideoTracks()[0];
                const senders = peerConnection.getSenders();
                const videoSender = senders.find(sender => 
                    sender.track && sender.track.kind === 'video'
                );
                
                if (videoSender) {
                    videoSender.replaceTrack(videoTrack);
                }
                
                // C·∫≠p nh·∫≠t local stream v√† UI
                localVideo.srcObject = screenStream;
                localStream = screenStream;
                
                // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng d·ª´ng chia s·∫ª m√†n h√¨nh
                videoTrack.addEventListener('ended', () => {
                    stopScreenSharing();
                });
                
                isScreenSharing = true;
                shareScreenBtn.innerHTML = '<i class="fas fa-desktop text-xl"></i>';
                shareScreenBtn.classList.add('bg-red-600');
                shareScreenBtn.classList.remove('bg-gray-700');
                
            } catch (error) {
                console.error('L·ªói khi chia s·∫ª m√†n h√¨nh:', error);
            }
        } else {
            stopScreenSharing();
        }
    }

    // D·ª´ng chia s·∫ª m√†n h√¨nh
    function stopScreenSharing() {
        if (isScreenSharing && originalLocalStream) {
            // L·∫•y video track t·ª´ localStream g·ªëc
            const videoTrack = originalLocalStream.getVideoTracks()[0];
            
            // Thay th·∫ø trong peer connection
            const senders = peerConnection.getSenders();
            const videoSender = senders.find(sender => 
                sender.track && sender.track.kind === 'video'
            );
            
            if (videoSender && videoTrack) {
                videoSender.replaceTrack(videoTrack);
            }
            
            // D·ª´ng t·∫•t c·∫£ c√°c track c·ªßa stream m√†n h√¨nh
            localStream.getTracks().forEach(track => track.stop());
            
            // Kh√¥i ph·ª•c localStream g·ªëc
            localStream = originalLocalStream;
            localVideo.srcObject = originalLocalStream;
            
            isScreenSharing = false;
            shareScreenBtn.innerHTML = '<i class="fas fa-desktop text-xl"></i>';
            shareScreenBtn.classList.add('bg-gray-700');
            shareScreenBtn.classList.remove('bg-red-600');
        }
    }

    // B·∫Øt ƒë·∫ßu ƒë·∫øm th·ªùi gian cu·ªôc g·ªçi
    function startCallTimer() {
        callStartTimestamp = Date.now();
        updateCallTimer();
        
        timerInterval = setInterval(updateCallTimer, 1000);
    }

    // C·∫≠p nh·∫≠t ƒë·ªìng h·ªì ƒë·∫øm th·ªùi gian cu·ªôc g·ªçi
    function updateCallTimer() {
        const elapsedTime = Math.floor((Date.now() - callStartTimestamp) / 1000);
        const minutes = Math.floor(elapsedTime / 60).toString().padStart(2, '0');
        const seconds = (elapsedTime % 60).toString().padStart(2, '0');
        callTimer.textContent = `${minutes}:${seconds}`;
    }

    // D·ª´ng ƒë·∫øm th·ªùi gian cu·ªôc g·ªçi
    function stopCallTimer() {
        if (timerInterval) {
            clearInterval(timerInterval);
            timerInterval = null;
        }
    }

    // C·∫≠p nh·∫≠t th·ªùi gian b·∫Øt ƒë·∫ßu cu·ªôc g·ªçi
    function updateCallStartTime() {
        const callStartTimeEl = document.getElementById('callStartTime');
        if (callStartTimeEl) {
            const startTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            callStartTimeEl.textContent = startTime;
        }
    }

    // C·∫≠p nh·∫≠t ch·∫•t l∆∞·ª£ng cu·ªôc g·ªçi
    function setCallQuality(quality) {
        if (!callQuality) return; // N·∫øu element kh√¥ng t·ªìn t·∫°i
        
        callQuality.textContent = quality;
        
        if (quality === 'T·ªët') {
            callQuality.className = 'text-green-500';
        } else if (quality === 'Trung b√¨nh') {
            callQuality.className = 'text-yellow-500';
        } else {
            callQuality.className = 'text-red-500';
        }
    }

    // T·∫°o room ID ng·∫´u nhi√™n
    function generateRandomRoomId() {
        return Math.random().toString(36).substring(2, 15);
    }


    // Event listeners
    if (toggleMicBtn) toggleMicBtn.addEventListener('click', toggleMicrophone);
    if (toggleVideoBtn) toggleVideoBtn.addEventListener('click', toggleCamera);
    if (shareScreenBtn) shareScreenBtn.addEventListener('click', toggleScreenSharing);
    if (endCallBtn) endCallBtn.addEventListener('click', endCall);
    if (callAgainBtn) {
        callAgainBtn.addEventListener('click', () => {
            window.location.reload();
        });
    }
    
    // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng r·ªùi ƒëi
    window.addEventListener('beforeunload', () => {
        if (socket && socket.connected) {
            socket.emit('leave-room');
        }
        if (peerConnection) {
            peerConnection.close();
        }
        if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
        }
    });
});