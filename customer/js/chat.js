import { socket } from './util/socket.js';
document.addEventListener('DOMContentLoaded', function() {
    const modalLogin = document.getElementById('modalLogin');
    const userId = document.getElementById('userid').value;
    const body = document.body;
    const btnOpen = document.getElementById('btn-open-chat');
    const btnClose = document.getElementById('btn-close-chat');
    const panel = document.getElementById('chatbox-panel');
    const form = document.getElementById('chatbox-form');
    const input = document.getElementById('chatbox-input');
    const messages = document.getElementById('chatbox-messages');
    const quickMessages = document.getElementById('quick-messages');
    
    // Bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i ƒë√£ load l·ªãch s·ª≠ chat hay ch∆∞a
    let historyLoaded = false;
    
    // M·∫£ng ƒë·ªÉ l∆∞u l·ªãch s·ª≠ chat
    let chatHistory = [];
    
    // Danh s√°ch c√°c tin nh·∫Øn nhanh theo ch·ªß ƒë·ªÅ
    const quickMessageCategories = {
        phim: [
            "Phim ƒëang chi·∫øu h√¥m nay?",
            "Phim s·∫Øp chi·∫øu l√† g√¨?",
            "Phim n√†o ƒëang hot nh·∫•t?",
            "Phim c√≥ ph·ª• ƒë·ªÅ ti·∫øng Vi·ªát kh√¥ng?",
            "Phim n√†y ph√π h·ª£p v·ªõi tr·∫ª em kh√¥ng?"
        ],
        rapphim: [
            "ƒê·ªãa ch·ªâ r·∫°p?",
            "R·∫°p c√≥ ch·ªó ƒë·∫≠u xe kh√¥ng?", 
            "R·∫°p m·ªü c·ª≠a m·∫•y gi·ªù?",
            "R·∫°p c√≥ bao nhi√™u ph√≤ng chi·∫øu?",
            "C√≥ ph√≤ng chi·∫øu VIP kh√¥ng?"
        ],
        suatchieu: [
            "Su·∫•t chi·∫øu phim h√¥m nay?",
            "Su·∫•t chi·∫øu cu·ªëi c√πng l√† m·∫•y gi·ªù?",
            "C√≤n v√© cho su·∫•t 20h kh√¥ng?",
            "Su·∫•t chi·∫øu s·ªõm nh·∫•t l√† m·∫•y gi·ªù?",
            "L·ªãch chi·∫øu cu·ªëi tu·∫ßn n√†y?"
        ],
        giave: [
            "Gi√° v√© l√† bao nhi√™u?",
            "C√≥ gi·∫£m gi√° cho h·ªçc sinh/sinh vi√™n kh√¥ng?",
            "Gi√° v√© ng√†y l·ªÖ c√≥ ƒë·∫Øt h∆°n kh√¥ng?",
            "Combo v√© v√† b·∫Øp n∆∞·ªõc gi√° sao?",
            "C√≥ ∆∞u ƒë√£i cho th√†nh vi√™n kh√¥ng?"
        ]
    };
    
    // Kh·ªüi t·∫°o c√°c tin nh·∫Øn nhanh
    function initQuickMessages(category = 'phim') {
        if (!quickMessages) return;
        
        // T·∫°o thanh danh m·ª•c
        if (!document.getElementById('quick-topics')) {
            const topicsDiv = document.createElement('div');
            topicsDiv.id = 'quick-topics';
            
            // Th√™m b·ªçc container ƒë·ªÉ c·∫£i thi·ªán layout
            const topicsContainer = document.createElement('div');
            topicsContainer.className = 'flex w-full justify-between space-x-1';
            topicsDiv.appendChild(topicsContainer);
            
            for (const cat in quickMessageCategories) {
                const btn = document.createElement('button');
                btn.className = `topic-btn ${cat === category ? 'active' : ''}`;
                btn.dataset.category = cat;
                
                switch(cat) {
                    case 'phim': btn.textContent = 'üé¨ Phim'; break;
                    case 'rapphim': btn.textContent = 'üè¢ R·∫°p'; break;
                    case 'suatchieu': btn.textContent = 'üïí L·ªãch'; break;
                    case 'giave': btn.textContent = 'üí∞ Gi√° v√©'; break;
                    default: btn.textContent = cat;
                }
                
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.topic-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    initQuickMessages(this.dataset.category);
                });
                
                topicsContainer.appendChild(btn);
            }
            
            quickMessages.parentNode.insertBefore(topicsDiv, quickMessages);
        }
        
        // T·∫°o c√°c n√∫t tin nh·∫Øn nhanh
        const messages = quickMessageCategories[category] || [];
        quickMessages.innerHTML = '';

        const container = document.createElement('div');
        container.className = 'flex space-x-2 pb-1'; // Th√™m pb-1 ƒë·ªÉ tr√°nh b·ªã c·∫Øt khi overflow

        messages.forEach(msg => {
            const btn = document.createElement('button');
            btn.className = 'px-3 py-1.5 bg-white text-blue-700 rounded-full text-xs border border-blue-200 hover:bg-blue-100 transition whitespace-nowrap flex-shrink-0';
            btn.textContent = msg;
            btn.addEventListener('click', () => {
                // ƒêi·ªÅn n·ªôi dung v√†o √¥ input
                if (input) {
                    input.value = msg;
                    input.focus();
                }
            });
            container.appendChild(btn);
        });

        quickMessages.appendChild(container);
    }

    function openModal(modal) { // Hi·ªÉn th·ªã modal ƒëƒÉng nh·∫≠p
        modal.classList.add('is-open');
        body.classList.add('modal-open');
    }
    
    socket.on('connect', () => {
        // console.log('K·∫øt n·ªëi t·ªõi server realtime th√†nh c√¥ng');
    });
    
    socket.on('disconnect', () => {
        // console.log('M·∫•t k·∫øt n·ªëi t·ªõi server realtime');
    });
    
    socket.on('bot-ai-gui-tin-nhan', function(message) {
        console.log('Tin nh·∫Øn t·ª´ AI:', message);
        // X√≥a d√≤ng "ƒêang tr·∫£ l·ªùi..."
        const typing = messages.querySelector('.ai-typing');
        if (typing) typing.remove();
        // Hi·ªÉn th·ªã tin nh·∫Øn AI
        appendMessage('AI', message, 'left');
        // B·∫≠t l·∫°i input v√† n√∫t g·ª≠i
        input.disabled = false;
        form.querySelector('button[type="submit"]')?.removeAttribute('disabled');
        scrollToBottom();
        
        // Th√™m tin nh·∫Øn t·ª´ AI v√†o l·ªãch s·ª≠
        chatHistory.push({
            id: Date.now(),
            noi_dung: message,
            nguoi_gui: null, // AI
            created_at: new Date().toISOString()
        });
        
        // G·ªçi API l∆∞u tin nh·∫Øn AI v√†o cookie
        saveMessageToCookie(message, null); // null = t·ª´ AI
    });
    
    if(userId && socket){
        socket.emit('khach-hang-truc-tuyen', userId);
    }
    
    function scrollToBottom() {
        messages.scrollTop = messages.scrollHeight;
    }

    // H√†m th√™m tin nh·∫Øn v√†o khung chat
    function appendMessage(sender, content, position) {
        const messageClass = position === 'left' ? 'text-left text-gray-500' : 'text-right';
        const bubbleClass = position === 'left' ? 'bg-gray-100' : 'bg-blue-100 text-blue-900';
        const senderName = position === 'left' ? 'AI:' : 'B·∫°n:';
        
        messages.innerHTML += `
            <div class="mb-2 ${messageClass}">
                <b>${senderName}</b> 
                <span class="inline-block ${bubbleClass} rounded px-2 py-1">${content}</span>
            </div>
        `;
    }
    
    // H√†m g·ªçi API l∆∞u tin nh·∫Øn v√†o cookie
    async function saveMessageToCookie(message, nguoiGui = 1) {
        try {
            const response = await fetch(`${panel.dataset.url}/api/gui-tin-nhan-chatbot`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({
                    'message': message,
                    'nguoi_gui': nguoiGui
                })
            });
            
            const result = await response.json();
            if (!result.success) {
                console.warn('Kh√¥ng th·ªÉ l∆∞u tin nh·∫Øn v√†o l·ªãch s·ª≠ chat:', result.error);
            }
        } catch (error) {
            console.error('L·ªói khi l∆∞u tin nh·∫Øn v√†o l·ªãch s·ª≠ chat:', error);
        }
    }
    
    // H√†m l·∫•y l·ªãch s·ª≠ chat t·ª´ API
    async function loadChatHistory() {
        if (historyLoaded) return; // Tr√°nh load l·∫°i nhi·ªÅu l·∫ßn
        
        try {
            messages.innerHTML = '<div class="text-center py-4 text-gray-500"><i>ƒêang t·∫£i l·ªãch s·ª≠ chat...</i></div>';

            const response = await fetch(`${panel.dataset.url}/api/lich-su-chat`);
            const data = await response.json();
            
            if (data.success && data.data && Array.isArray(data.data)) {
                messages.innerHTML = ''; // X√≥a th√¥ng b√°o ƒëang t·∫£i
                
                // C·∫≠p nh·∫≠t l·ªãch s·ª≠ chat
                chatHistory = data.data;
                
                // Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
                chatHistory.forEach(msg => {
                    if (msg.nguoi_gui === 1) { // Ng∆∞·ªùi d√πng
                        appendMessage('B·∫°n', msg.noi_dung, 'right');
                    } else { // AI ho·∫∑c h·ªá th·ªëng
                        appendMessage('AI', msg.noi_dung, 'left');
                    }
                });
                
                historyLoaded = true;
            } else {
                messages.innerHTML = '<div class="text-center py-4 text-gray-500"><i>Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ chat.</i></div>';
                chatHistory = [];
            }
        } catch (error) {
            console.error('L·ªói khi t·∫£i l·ªãch s·ª≠ chat:', error);
            messages.innerHTML = '<div class="text-center py-4 text-gray-500"><i>ƒê√£ x·∫£y ra l·ªói khi t·∫£i l·ªãch s·ª≠ chat.</i></div>';
            chatHistory = [];
        }
        
        scrollToBottom();
    }

    if (btnOpen && panel) btnOpen.onclick = () => {
        panel.classList.remove('hidden');
        btnOpen.classList.add('hidden');
        setTimeout(() => input && input.focus(), 200);
        
        if(userId && socket){
            // Load l·ªãch s·ª≠ chat khi m·ªü chatbox
            loadChatHistory();
        }
        
        // Kh·ªüi t·∫°o tin nh·∫Øn nhanh
        initQuickMessages();
        
        scrollToBottom();
    };
    
    if (btnClose && panel) btnClose.onclick = () => {
        panel.classList.add('hidden');
        btnOpen.classList.remove('hidden');
    };
    
    if (form && input && messages) form.onsubmit = function(e) {
        e.preventDefault();
        if(!userId){
            alert("Vui l√≤ng ƒëƒÉng nh·∫≠p!");
            openModal(modalLogin);
            panel.classList.add('hidden');
            btnOpen.classList.remove('hidden');
            return;
        }
        
        const msg = input.value.trim();
        if (!msg) return;
        
        // Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
        appendMessage('B·∫°n', msg, 'right');
        input.value = '';
        
        // Th√™m tin nh·∫Øn m·ªõi v√†o l·ªãch s·ª≠ chat
        const newUserMessage = {
            id: Date.now(),
            noi_dung: msg,
            nguoi_gui: 1, // User
            created_at: new Date().toISOString()
        };
        chatHistory.push(newUserMessage);
        
        // G·ªçi API l∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng v√†o cookie
        saveMessageToCookie(msg, 1); // 1 = t·ª´ kh√°ch h√†ng
        
        // Th√™m d√≤ng "ƒêang tr·∫£ l·ªùi..." v·ªõi class ƒë·ªÉ d·ªÖ x√≥a
        messages.innerHTML += `<div class="mb-2 text-left text-gray-500 ai-typing"><b>AI:</b> <span class="inline-block bg-gray-100 rounded px-2 py-1"><i>ƒêang tr·∫£ l·ªùi...</i></span></div>`;
        
        // V√¥ hi·ªáu h√≥a input v√† n√∫t g·ª≠i
        input.disabled = true;
        form.querySelector('button[type="submit"]')?.setAttribute('disabled', 'disabled');
        scrollToBottom();
        
        // G·ª≠i tin nh·∫Øn l√™n server realtime (n·∫øu c√≥ socket)
        if (socket) {
            // G·ª≠i tin nh·∫Øn m·ªõi v√† to√†n b·ªô l·ªãch s·ª≠ chat
            socket.emit('khach-hang-gui-tin-nhan', JSON.stringify({
                msg: msg, 
                id: userId,
                history: chatHistory // G·ª≠i to√†n b·ªô l·ªãch s·ª≠ chat
            }));
        } else {
            // N·∫øu kh√¥ng c√≥ socket, c√≥ th·ªÉ g·ª≠i API th∆∞·ªùng ·ªü ƒë√¢y
            const typing = messages.querySelector('.ai-typing');
            if (typing) typing.remove();
            appendMessage('AI', 'Kh√¥ng th·ªÉ k·∫øt n·ªëi AI.', 'left');
            input.disabled = false;
            form.querySelector('button[type="submit"]')?.removeAttribute('disabled');
            scrollToBottom();
        }
    };

    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && panel) panel.classList.add('hidden');
    });
});

document.addEventListener('DOMContentLoaded', function() {
    // Khi ƒë√£ t·∫°o xong chatbox v√† c√°c n√∫t
    const toolbar = document.querySelector('.category-toolbar');
    if (toolbar) {
        const buttons = toolbar.querySelectorAll('button');
        buttons.forEach(btn => {
            btn.addEventListener('click', function() {
                buttons.forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                initQuickMessages(this.dataset.category);
            });
        });
    }
});